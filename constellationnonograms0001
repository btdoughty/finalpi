#############################################################################
#
#  Raspberry Pi Final Project
#
#  Constellation Nonograms
#
#  By:
#  Jalen Senones
#  Carmen Nicholson
#  Ben Doughty
#
#############################################################################

import Tkinter as tk

# The starting point for the grid code comes from stackoverflow user fhdrsdg at
# http://stackoverflow.com/questions/26988204/using-2d-array-to-create-clickable-tkinter-canvas

# sets the number of rows and columns in the game
ROWS = 8
COLS = 16

# creates an array to store the information on whether or not each cell has been clicked
cells = [["empty" for i in range(COLS)] for i in range(ROWS)]

def click(event):
    # sets the size of each column and row
    col_width = 40
    row_height = 40
    
    # forces the grid to begin and end a distance from the edge of the window equal to the cell size (width & height)
    # ***question about this:  this does not make sense, it should be cols-1 and rows-1, but that does not work right.  why??***
    if event.x >= col_width and event.x <= col_width * (COLS + 1) and event.y >= row_height and event.y <= row_height * (ROWS + 1):
            
        # The event.x and event.y return the coordinates of the cursor
        # By finding the floor of the coordinates divided by their respective boundary size,
        # we can define which column and row have been clicked
        # 1 is subtracted to correct for the empty border area
        col = event.x//col_width - 1
        row = event.y//row_height - 1

        #if 
        # fills in the cell when it is clicked
        if cells[row][col] == "empty":
            cells[row][col] = gamewindow.create_rectangle((col+1)*col_width, (row+1)*row_height, (col+2)*col_width, (row+2)*row_height, fill="black")
        # clears a filled tile if it is clicked
        else:
            gamewindow.delete(cells[row][col])
            cells[row][col] = "empty"

# creates the window, a canvas and the mouse click event binding
root = tk.Tk()
gamewindow = tk.Canvas(root, width=720, height=400, borderwidth=5, background='white')
gamewindow.pack()
gamewindow.bind("<Button-1>", click)

# draws a grid for the game space
for i in range (COLS):
    for j in range (ROWS):
        gamewindow.create_rectangle(40*(i+1),40*(j+1),40*(i+2),40*(j+2))

# labels the rows for the nonogram
for i in range (COLS):
    gamewindow.create_text(40*(i+1.5), 20, text="##")
for j in range (ROWS):
    gamewindow.create_text(20, 40*(j+1.5), text="##")

root.mainloop()

